# The start of Notes0x1
# Language: Python
# Type: Random notes


sorted(list) vs list.sort()

  sorted() - Returns a new sorted list, original list unchanged. 
  list.sort() - Sorts in-place, returns None. Faster (cuz dont have to create copy).

  Use sorted() if you need the orignal position.
  Use list.sort() if you want to mutate the list.
  
Dictionary

  Creating an empty dictionary
    data = {}
    # or
    data = dict()
  
  Creating a dictionary with initial values
    data = {'a':1, 'b':2, 'c':3}
    # or
    data = dict(a=1, b=2, c=3)
    # or
    data = {k:v for k, v in(('a', 1), ('b', 2), ('c',3))}
    
  Inserting/Updating a single value
    data['a'] = 1   # Updates if 'a' exists, else adds 'a'
    # or
    data.update({'a':1})
    # or
    data.update(dict(a=1))
    # or
    data.update(a=1)
    
  Inserting/Updating multi value
    data.update({'c':3, 'd':4})   # Updates 'c' and adds 'd'
    
  Creating a merged dictionary without modifying original
    data3 = {}
    data3.update(data)  # Modifies data3, not data
    data3.update(data2)  # Modifies data3, not data2

  Deleting items in dictionary
    del data[key]  # Removes specific element in a dictionary
    data.pop(key)  # Removes the key & returns the value
    data.clear()  # Clears entire dictionary

  Iterate through pairs in a dictionary
    for key in data: # Iterates just through the keys, ignore value
    for key, value in d.item(): # Iterates through the pairs
    
  Check if a key is already in dictionary
    key in data
    
    
   
Binary Search Tree
  Inorder Successor in Binary Search Tree - 
    In Binary Tree, Inorder successor of a node is the next node in Inorder traversal of the Binary Tree.
    In Binary Search Tree, Inorder Successor of an input node can also be defined as the node with the smallest key greater than the key of input node.
    
  How to find Inorder Successor in Binary Search Tree?
    - Method 1 (Uses Parent Pointer)
      Assume that every node has parent pointer
        1) If right subtree of node is not NULL, then succ lies in right subtree.
        2) If right subtree of node is NULL, then succ is one of the ancestors.
        
    - Method 2 (Search from root)
    
    
    ref: https://www.geeksforgeeks.org/inorder-successor-in-binary-search-tree/
    
